#include <stdio.h>
#include <stdlib.h>

void bestFit(int blockSize[], int m, int processSize[], int n) {
    int *allocation = (int *)malloc(n * sizeof(int)); // Dynamically allocate memory for allocation
    for (int i = 0; i < n; i++) {
        allocation[i] = -1; // Initially, all processes are unallocated
    }

    for (int i = 0; i < n; i++) {
        int bestIdx = -1;
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (bestIdx == -1 || blockSize[bestIdx] > blockSize[j]) {
                    bestIdx = j; // Find the best fit block
                }
            }
        }
        if (bestIdx != -1) {
            allocation[i] = bestIdx; // Allocate block
            blockSize[bestIdx] -= processSize[i]; // Reduce available size
        }
    }

    printf("Process No.\tBlock No.\n");
    for (int i = 0; i < n; i++) {
        if (allocation[i] != -1) {
            printf("%d\t\t%d\n", i + 1, allocation[i] + 1);
        } else {
            printf("%d\t\tNot Allocated\n", i + 1);
        }
    }

    free(allocation); // Free dynamically allocated memory
}

int main() {
    int blockSize[] = {100, 500, 200, 300, 600};
    int processSize[] = {212, 417, 112, 426};
    int m = sizeof(blockSize) / sizeof(blockSize[0]);
    int n = sizeof(processSize) / sizeof(processSize[0]);

    bestFit(blockSize, m, processSize, n);
    return 0;
}
