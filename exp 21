#include <stdio.h>

void worstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n];
    // Initialize all allocations to -1 (indicating no allocation)
    for (int i = 0; i < n; i++) allocation[i] = -1;

    // Iterate through each process
    for (int i = 0; i < n; i++) {
        int worstIdx = -1;
        // Find the largest block that can accommodate the process
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i] && (worstIdx == -1 || blockSize[worstIdx] < blockSize[j])) {
                worstIdx = j;
            }
        }
        // Allocate the block if found
        if (worstIdx != -1) {
            allocation[i] = worstIdx;
            blockSize[worstIdx] -= processSize[i]; // Reduce the block size
        }
    }

    // Print the allocation results
    printf("Process No.\tBlock No.\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t", i + 1);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }
}

int main() {
    int blockSize[] = {100, 500, 200, 300, 600};
    int processSize[] = {212, 417, 112, 426};
    int m = sizeof(blockSize) / sizeof(blockSize[0]);
    int n = sizeof(processSize) / sizeof(processSize[0]);
    worstFit(blockSize, m, processSize, n);
    return 0;
}
